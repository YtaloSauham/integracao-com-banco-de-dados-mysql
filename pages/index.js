import Head from 'next/head'
import Image from 'next/image'
import Layout from '../components/Layout/Layout'
import styles from '../styles/Home.module.css'
import { Table,Button,Form,Row,Col } from 'react-bootstrap'
import { useEffect, useState } from 'react'
import axios from 'axios'



const baseUrl='http://localhost:3000/api/produtos'
export default function Home() {
  const [produtos,setProdutos]=useState([])
  const [codigo,setCodigo]=useState('')
  const [editcodigo,setEditCodigo]=useState('')
  const [descricao,setDescricao]=useState('')
  const [marca,setMarca]=useState('')
  const [tamanho,setTamanho]=useState('')
  const [quantidade,setQuantidade]=useState('')
  const [precocusto,setCusto]=useState('')
  const [precovenda,setVenda]=useState('')
  const [validated, setValidated] = useState(false)
  const [isLoading,setLoading]=useState(false)
  const [produtosPerPage,setProdutosPerPage] =useState(10)
  const [currentPage, setCurrentPage] = useState(0)

  const pages= Math.ceil(produtos.length / produtosPerPage)
  const startIndex = currentPage* produtosPerPage
  const endIndex = startIndex + produtosPerPage
  const currentItens = produtos.slice(startIndex, endIndex)
  
  useEffect(()=>{
    setInterval(()=>{axios.get(baseUrl)
      .then((res)=>{setProdutos(res.data)})
      .catch((err)=>{console.log(err)})
    },2000)
    
   },[])

  //  function handleChangeValues(values){
  //    setValues((prevValue)=>({
  //      ...prevValue,
  //      [value.target.name]:value.target.value,
  //    }))
  //  }

   function save(event){
    event.preventDefault();
    
    const method = codigo && codigo!=editcodigo ? 'post' : 'put'
    const url= codigo && codigo!=editcodigo  ? baseUrl : `${baseUrl}/${codigo}`
    console.log("method: " + method)
       axios[method](url,{codigo,descricao,marca,tamanho,quantidade,precocusto,precovenda})
        .then(()=>clear())
        .catch(()=>console.log("deu ruim"))
   }


        function update(produtos){
          setEditCodigo(produtos.codigo)
          setCodigo(produtos.codigo)
          setDescricao(produtos.descricao)
          setMarca(produtos.marca)
          setTamanho(produtos.tamanho)
          setQuantidade(produtos.quantidade)
          setCusto(produtos.precocusto)
          setVenda(produtos.precovenda)
           }
  
      async function remove(id_delete){
          await axios.delete(`${baseUrl}/${id_delete}`)
  
      }
  
      function clear(){
        setEditCodigo('')
        setCodigo('')
        setDescricao('')
        setMarca('')
        setTamanho('')
        setQuantidade('')
        setCusto('')
        setVenda('')
      }



  function renderTable(){
    return (             
        <Table striped bordered hover variant="dark">
            <thead>
                <tr>
                    <th>Codigo</th>
                    <th>Descrição</th>
                    <th>Marca</th>
                    <th>Tamanho</th>
                    <th>Quantidade</th>
                    <th>Preço custo</th>
                    <th>Preço venda</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                {renderRows()}
            </tbody>
        </Table>
    )
}

function renderRows(){
  return currentItens?.map((produtos,i)=>{
      return  (
          <tr key={produtos.codigo}> 
          <td>{produtos.codigo}</td>
              <td>{produtos.descricao}</td>
              <td>{produtos.marca}</td>
              <td>{produtos.tamanho}</td>
              <td>{produtos.quantidade}</td>
              <td>{produtos.precocusto}</td>
              <td>{produtos.precovenda}</td>
              <td>
                  
                  <Button size="sm" className={styles.button_Edit} variant="warning" onClick={()=>{update(produtos)}}>
                     edit
                      </Button>

                  <Button size="sm" className={styles.button_Remove} variant="danger" onClick={()=>{remove(produtos.codigo)}}>del</Button>
                
              </td>
          
          </tr>
              )
   })
}

  return (
    <div className={styles.background}>
      <Layout>
      <Head>
        <title> Felype Aguiar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Form noValidate validated={validated} onSubmit={(e)=>{save(e)}}>
            <Row className="mb-3">
            <Form.Group as={Col} controlId="formGridCodigo">
            <Form.Label>Codigo</Form.Label>
            <Form.Control type="number" placeholder="Ex:23" value={codigo} onChange={(e)=>setCodigo(e.target.value)} required/>
            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            <Form.Control.Feedback type="invalid">Digite um Codigo valido</Form.Control.Feedback>
            </Form.Group> 
            <Form.Group as={Col} controlId="formGridDescricao">
            <Form.Label>Descrição</Form.Label>
            <Form.Control type="text" placeholder="Ex:Camisa Branca" value={descricao} onChange={(e)=>setDescricao(e.target.value)} required/>
            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            <Form.Control.Feedback type="invalid">Digite uma Descrição </Form.Control.Feedback>
            </Form.Group>
            <Form.Group as={Col} controlIds="formGridMarca">
            <Form.Label>Marca</Form.Label>
            <Form.Control type="text" placeholder="Ex:Lacoste" value={marca} onChange={(e)=>setMarca(e.target.value)} required/>
            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            <Form.Control.Feedback type="invalid">Digite a Marca </Form.Control.Feedback>
            </Form.Group>
            <Form.Group as={Col} controlIds="formGridTamanho">
            <Form.Label>Tamanho</Form.Label>
            <Form.Control type="text" placeholder="Ex:M" value={tamanho} onChange={(e)=>setTamanho(e.target.value)} required/>
            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            <Form.Control.Feedback type="invalid">Digite o Tamanho </Form.Control.Feedback>
            </Form.Group>
            
            </Row>
            <Row>
            <Form.Group as={Col} controlIds="formGridQuantidade">
            <Form.Label>Quantidade</Form.Label>
            <Form.Control type="text" placeholder="Ex:M" value={quantidade} onChange={(e)=>setQuantidade(e.target.value)} required/>
            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            <Form.Control.Feedback type="invalid">Digite a Quantidade</Form.Control.Feedback>
            </Form.Group>

            <Form.Group as={Col} controlIds="formGridCusto">
            <Form.Label>Preco de Custo</Form.Label>
            <Form.Control type="number" placeholder="Ex:25.5" value={precocusto} onChange={(e)=>{setCusto(e.target.value)}} required/>
            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            <Form.Control.Feedback type="invalid">Digite o Preço de Custo</Form.Control.Feedback>
            </Form.Group>

            <Form.Group as={Col} controlIds="formGridVenda">
            <Form.Label>Preco de venda</Form.Label>
            <Form.Control type="text" placeholder="Ex:25.5" value={precovenda} onChange={(e)=>setVenda(e.target.value)} required/>
            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            <Form.Control.Feedback type="invalid">Digite o Preço de Venda</Form.Control.Feedback>
            </Form.Group>
            </Row>
            <Button variant="primary"
           
            type="submit">Salvar</Button>
          <Button  variant="secondary"  active onClick={e=>{clear()}}>Cancelar</Button >
          </Form>
          
      {renderTable()}
      <div><span>Produto por pagina</span>
      <select value={produtosPerPage} onChange={(e) => setProdutosPerPage(Number(e.target.value))}>
        <option value={5}>5</option>
        <option value={10}>10</option>
        <option value={15}>15</option>
        <option value={20}>20</option>
      </select>
      </div>
      <div>{Array.from(Array(pages), (item, index) => {
        return <button style={ index === currentPage ? {backgroundColor: "blue",borderRadius:"40"} : null } value={index} onClick={(e) =>{setCurrentPage(Number(e.target.value))}}>{index + 1}</button>
      })}</div>
      </Layout>
      
    

     
    </div>
  )
}
